{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11057402,"sourceType":"datasetVersion","datasetId":6889102}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_1 = user_secrets.get_secret(\"git_token\")\n!git clone https://hoivd:{secret_value_1}@github.com/hoivd/talent_clef\n\nimport wandb\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"wandb\")\n\n\n# Đăng nhập W&B\nwandb.login(key=secret_value_0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:26.581460Z","iopub.execute_input":"2025-03-19T15:44:26.581775Z","iopub.status.idle":"2025-03-19T15:44:27.340812Z","shell.execute_reply.started":"2025-03-19T15:44:26.581752Z","shell.execute_reply":"2025-03-19T15:44:27.340098Z"}},"outputs":[{"name":"stdout","text":"fatal: destination path 'talent_clef' already exists and is not an empty directory.\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mhoivinh20789\u001b[0m (\u001b[33mhoivinh20789-uit\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}],"execution_count":2},{"cell_type":"markdown","source":"# 1. Import thư viện","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sentence_transformers import SentenceTransformer\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport numpy as np\nfrom torchmetrics.retrieval import RetrievalMAP\nfrom datetime import datetime\nimport os\nfrom sentence_transformers import SentenceTransformer, InputExample, losses\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:27.341916Z","iopub.execute_input":"2025-03-19T15:44:27.342148Z","iopub.status.idle":"2025-03-19T15:44:50.421914Z","shell.execute_reply.started":"2025-03-19T15:44:27.342127Z","shell.execute_reply":"2025-03-19T15:44:50.421212Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"corpus_path = \"/kaggle/working/talent_clef/data/TaskA/validation/english/corpus_elements\"  # Thay thế bằng đường dẫn file của bạn\nqueries_path = \"/kaggle/working/talent_clef/data/TaskA/validation/english/queries\"\nqrels_path = \"/kaggle/working/talent_clef/data/TaskA/validation/english/qrels.tsv\"\ntrain_path = \"/kaggle/working/talent_clef/data/TaskA/training/english/taskA_training_en.tsv\"\n\ndf_corpus = pd.read_csv(corpus_path, sep='\\t', encoding='utf-8')\ndf_queries = pd.read_csv(queries_path, sep='\\t', encoding='utf-8')\ndf_qrels = pd.read_csv(qrels_path, sep='\\t', names = ['q_id', 'iter', 'c_id', 'relevance'], encoding='utf-8')\ndf_train = pd.read_csv(train_path, sep='\\t', names = ['isco_id', 'esco_id', 'jobtitle1', 'jobtitle2'], encoding='utf-8')\n\nprint(df_corpus.head())\nprint(df_queries.head())\nprint(df_qrels.head())\nprint(df_train.head())","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:50.423106Z","iopub.execute_input":"2025-03-19T15:44:50.423707Z","iopub.status.idle":"2025-03-19T15:44:50.512603Z","shell.execute_reply.started":"2025-03-19T15:44:50.423684Z","shell.execute_reply":"2025-03-19T15:44:50.511884Z"}},"outputs":[{"name":"stdout","text":"   c_id                          jobtitle\n0     1                recording engineer\n1     2              director of taxation\n2     3  technical support representative\n3     4                        hr manager\n4     5           computer graphic artist\n   q_id             jobtitle\n0     1                nanny\n1     2    food technologist\n2     3   broadcast engineer\n3     4  automation engineer\n4     5         veterinarian\n   q_id  iter  c_id  relevance\n0     1     0   143          1\n1     1     0   150          1\n2     1     0   764          1\n3     1     0   870          1\n4     1     0  1464          1\n                                 isco_id  \\\n0  http://data.europa.eu/esco/isco/C0110   \n1  http://data.europa.eu/esco/isco/C0110   \n2  http://data.europa.eu/esco/isco/C0110   \n3  http://data.europa.eu/esco/isco/C0110   \n4  http://data.europa.eu/esco/isco/C0110   \n\n                                             esco_id  \\\n0  http://data.europa.eu/esco/occupation/f2cc5978...   \n1  http://data.europa.eu/esco/occupation/f2cc5978...   \n2  http://data.europa.eu/esco/occupation/f2cc5978...   \n3  http://data.europa.eu/esco/occupation/f2cc5978...   \n4  http://data.europa.eu/esco/occupation/f2cc5978...   \n\n                     jobtitle1                    jobtitle2  \n0                air commodore            flight lieutenant  \n1  command and control officer               flight officer  \n2                air commodore  command and control officer  \n3                pilot officer              squadron leader  \n4       royal airforce officer  command and control officer  \n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"cids = df_corpus['c_id'].tolist()\ncorpus = df_corpus['jobtitle'].tolist()\nqids = df_queries['q_id'].tolist()\nqueries = df_queries['jobtitle'].tolist()\njobtitle1 = df_train['jobtitle1'].tolist()\njobtitle2 = df_train['jobtitle2'].tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:50.513688Z","iopub.execute_input":"2025-03-19T15:44:50.513979Z","iopub.status.idle":"2025-03-19T15:44:50.518844Z","shell.execute_reply.started":"2025-03-19T15:44:50.513956Z","shell.execute_reply":"2025-03-19T15:44:50.517796Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"# Import model","metadata":{}},{"cell_type":"code","source":"from sentence_transformers import InputExample\n\n# Dữ liệu mẫu\ntrain_examples = [\n    InputExample(texts=[jobtitle1[idx], jobtitle2[idx]], label=1.0) for idx in range(len(jobtitle1))\n]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:50.519755Z","iopub.execute_input":"2025-03-19T15:44:50.520057Z","iopub.status.idle":"2025-03-19T15:44:50.562335Z","shell.execute_reply.started":"2025-03-19T15:44:50.520027Z","shell.execute_reply":"2025-03-19T15:44:50.561665Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"loss_function = None\nnum_epochs = None\nmodel_name = None","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:50.563081Z","iopub.execute_input":"2025-03-19T15:44:50.563319Z","iopub.status.idle":"2025-03-19T15:44:50.577368Z","shell.execute_reply.started":"2025-03-19T15:44:50.563300Z","shell.execute_reply":"2025-03-19T15:44:50.576539Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"train_dataloader = DataLoader(train_examples, shuffle=True, batch_size=16)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Device sử dụng:\", device)\n\n# Tải mô hình\nmodel_name = 'agne/jobBERT-de'\nmodel = SentenceTransformer(model_name, device=device)\n\n\n# # Khởi tạo hàm mất mát\n# train_loss = losses.CosineSimilarityLoss(model)\n# loss_function = \"CosineSimilarityLoss\"\n# # Tính tổng số batch\n# total_batches = len(train_dataloader)  # 2000 mẫu / 16 = 125 batch\n\n# # Huấn luyện với callback\n# num_epochs = 1\n# model.fit(\n#     train_objectives=[(train_dataloader, train_loss)],\n#     epochs=num_epochs,\n#     warmup_steps=100,\n#     output_path=\"/kaggle/working/all-mpnet-base-v2-finetuned\",\n#     show_progress_bar=True\n# )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:50.578194Z","iopub.execute_input":"2025-03-19T15:44:50.578466Z","iopub.status.idle":"2025-03-19T15:44:55.448345Z","shell.execute_reply.started":"2025-03-19T15:44:50.578440Z","shell.execute_reply":"2025-03-19T15:44:55.447405Z"}},"outputs":[{"name":"stdout","text":"Device sử dụng: cuda\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/608 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"50d58f7ab7864e709a1ea48f6638095f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/437M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"03a9c753c4b44c4f8137b9d388bef971"}},"metadata":{}},{"name":"stderr","text":"Some weights of BertModel were not initialized from the model checkpoint at agne/jobBERT-de and are newly initialized: ['bert.pooler.dense.bias', 'bert.pooler.dense.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/264 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b056346f60b1467e91ad171c79a3a1ea"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/249k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"91e4429f53904eb5a6583594ffba468c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9096f6eeff304a54a7ca8dc9bb8b31db"}},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"corpus_embeddings = model.encode(corpus)\nquery_embeddings = model.encode(queries)\n\ncorpus_embeddings = torch.tensor(corpus_embeddings)\nquery_embeddings = torch.tensor(query_embeddings)\n\nground_truths = dict()\nfor qid in qids:\n    ground_truths[qid] = df_qrels[(df_qrels['q_id']) == 1 & (df_qrels['relevance'] == 1)]['c_id'].tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:55.451304Z","iopub.execute_input":"2025-03-19T15:44:55.451570Z","iopub.status.idle":"2025-03-19T15:44:57.462218Z","shell.execute_reply.started":"2025-03-19T15:44:55.451545Z","shell.execute_reply":"2025-03-19T15:44:57.461455Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/82 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4dcf1d9367c645339e6e4cac6582a3f2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/4 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"464859d3a0e444c9aaa09ca688d7ac05"}},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"class SimilarityModel(nn.Module):\n    def __init__(self, corpus_embeddings, corpus_cids):\n        super(SimilarityModel, self).__init__()\n        self.corpus_embeddings = corpus_embeddings  # 2D tensor of corpus embeddings\n        self.corpus_cids = corpus_cids              # List of CIDs\n\n    def forward(self, question_embedding, top_n=10):\n        # Expand the question_embedding to match corpus_embeddings shape for cosine similarity calculation\n        question_embedding = question_embedding.unsqueeze(0).expand(self.corpus_embeddings.size(0), -1)\n        \n        # Compute cosine similarity\n        similarities = F.cosine_similarity(question_embedding, self.corpus_embeddings)\n        \n        # Get the top_n indices with the highest cosine similarity values\n        best_indices = similarities.argsort(descending=True)[:top_n]\n        \n        # Convert indices to corresponding CIDs\n        top_n_ids = [str(self.corpus_cids[i]) for i in best_indices.tolist()]\n        return top_n_ids, similarities\n        \n# Example device setup\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n\n\n# Initialize the similarity model\ncorpus_embeddings = corpus_embeddings.to(device)\n\nsimilarity_model = SimilarityModel(corpus_embeddings, cids).to(device)\nif torch.cuda.device_count() > 1:\n    similarity_model = nn.DataParallel(similarity_model)\n\nmap_metric = RetrievalMAP()\n\n# Thu thập dữ liệu cho MAP\npreds = []\ntargets = []\nindexes = []  # Chỉ số truy vấn (query index)\n\n# Tạo thư mục (bao gồm cả thư mục con nếu cần)\nfolder_name = f\"/kaggle/working/talent_clef/predict/{model_name}\"\nos.makedirs(folder_name, exist_ok=True)\n\nfile_path = f\"{folder_name}/predict_{datetime.now().strftime('%d-%m-%Y_%H.%M.%S')}.txt\"\n\nwith open(file_path, 'w') as f:\n    for idx, query_embedding in enumerate(query_embeddings):\n        # Convert question_embedding to tensor and move to the device\n        query_embedding = query_embedding.to(device)\n        \n        # Get the top_n most relevant CIDs\n        top_n_ids, similarities = similarity_model(query_embedding, top_n=10)\n        \n        # Write results to file\n        f.write(f\"{qids[idx]} {' '.join(top_n_ids)}\\n\")\n        y_true = torch.tensor([1 if cid in ground_truths[idx + 1] else 0 for cid in cids], \n                            dtype=torch.long).to(device)\n        \n        # Lưu trữ preds, targets, và indexes\n        preds.append(similarities)\n        targets.append(y_true)\n        indexes.append(torch.full_like(y_true, idx, dtype=torch.long))  # Gán index cho truy vấn\n\npreds = torch.cat(preds)       # Gộp tất cả similarity scores\ntargets = torch.cat(targets)   # Gộp tất cả nhãn thực tế\nindexes = torch.cat(indexes)   # Gộp tất cả chỉ số truy vấn\n\n# Tính MAP\nmap_metric.update(preds=preds, target=targets, indexes=indexes)\nmap_score = map_metric.compute()\nprint(f\"MAP: {map_score:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:57.463464Z","iopub.execute_input":"2025-03-19T15:44:57.463777Z","iopub.status.idle":"2025-03-19T15:44:58.121305Z","shell.execute_reply.started":"2025-03-19T15:44:57.463745Z","shell.execute_reply":"2025-03-19T15:44:58.120510Z"}},"outputs":[{"name":"stdout","text":"MAP: 0.0116\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"# Lưu thông tin mô hình","metadata":{}},{"cell_type":"markdown","source":"## Nhập thông tin mô hình","metadata":{}},{"cell_type":"code","source":"model_name = model_name\nMAP = float(map_score)\nloss = loss_function\nepochs = num_epochs\ntraining_time = None\nnotes = \"Test\"\n\n# Tạo dữ liệu mới\ndata = {\n    \"model_name\": [model_name],\n    \"MAP\": [MAP],\n    \"loss\": [loss],\n    \"epochs\": [epochs],\n    \"training_time (s)\": [training_time],\n    \"date\": [datetime.now().strftime(\"%d-%m-%Y %H:%M:%S\")],\n    \"notes\": [notes]\n}\n\nprint(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:58.122134Z","iopub.execute_input":"2025-03-19T15:44:58.122446Z","iopub.status.idle":"2025-03-19T15:44:58.128248Z","shell.execute_reply.started":"2025-03-19T15:44:58.122414Z","shell.execute_reply":"2025-03-19T15:44:58.127503Z"}},"outputs":[{"name":"stdout","text":"{'model_name': ['agne/jobBERT-de'], 'MAP': [0.01161245908588171], 'loss': [None], 'epochs': [None], 'training_time (s)': [None], 'date': ['19-03-2025 15:44:58'], 'notes': ['Test']}\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# Tạo DataFrame từ dữ liệu mới\ndf_new = pd.DataFrame(data)\n\n# Định nghĩa thư mục và đường dẫn file\nfolder_name = \"/kaggle/working/talent_clef/results\"\nfile_name = \"model_info.csv\"\nfile_path = os.path.join(folder_name, file_name)\n\n# Tạo thư mục nếu chưa có\nos.makedirs(folder_name, exist_ok=True)\n\n# Kiểm tra xem file đã tồn tại chưa\nif os.path.exists(file_path):\n    # Đọc file cũ\n    df_existing = pd.read_csv(file_path)\n    # Thêm dữ liệu mới vào file cũ\n    df_updated = pd.concat([df_existing, df_new], ignore_index=True)\n    # Lưu lại file\n    df_updated.to_csv(file_path, index=False)\n    print(f\"Đã thêm dữ liệu vào file: {file_path}\")\nelse:\n    # Nếu file chưa tồn tại, tạo file mới\n    df_new.to_csv(file_path, index=False)\n    print(f\"Đã tạo file mới: {file_path}\")\n\n# Kiểm tra nội dung file (trên Kaggle)\n!cat {file_path}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:44:58.129227Z","iopub.execute_input":"2025-03-19T15:44:58.129538Z","iopub.status.idle":"2025-03-19T15:45:00.027529Z","shell.execute_reply.started":"2025-03-19T15:44:58.129511Z","shell.execute_reply":"2025-03-19T15:45:00.026191Z"}},"outputs":[{"name":"stdout","text":"Đã thêm dữ liệu vào file: /kaggle/working/talent_clef/results/model_info.csv\nmodel_name,MAP,loss,epochs,training_time (s),date,notes\njjzha/esco-xlm-roberta-large,0.006852036807686,,,,19-03-2025 11:17:43,First Run\njjzha/esco-xlm-roberta-large,0.006852036807686,,,,19-03-2025 11:30:37,Test 2\njjzha/esco-xlm-roberta-large,0.006852036807686,,,,19-03-2025 11:35:18,Test 3\njjzha/esco-xlm-roberta-large,0.006852036807686,,,,19-03-2025 11:36:08,Test 4\nsentence-transformers/all-MiniLM-L6-v2,0.0118653764948248,,,,19-03-2025 13:02:35,mô hình khác\nsentence-transformers/all-mpnet-base-v2,0.0123817594721913,,,,19-03-2025 13:06:26,mô hình khác\nsentence-transformers/all-mpnet-base-v2,0.0063653672114014,,1.0,,19-03-2025 14:27:09,thử train trực tiếp tập train\nsentence-transformers/all-mpnet-base-v2,0.0063653672114014,ContrastiveLoss,1.0,,19-03-2025 14:28:32,thử train trực tiếp tập train\nagne/jobBERT-de,0.0116124590858817,,,,19-03-2025 15:33:09,Test\nagne/jobBERT-de,0.0116124590858817,,,,19-03-2025 15:38:09,Test\nagne/jobBERT-de,0.01161245908588171,,,,19-03-2025 15:44:58,Test\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-12-ce95425cd36d>:17: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n  df_updated = pd.concat([df_existing, df_new], ignore_index=True)\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"## Lưu thông tin trên GitHub","metadata":{}},{"cell_type":"code","source":"cd talent_clef","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:45:00.028553Z","iopub.execute_input":"2025-03-19T15:45:00.028926Z","iopub.status.idle":"2025-03-19T15:45:00.035974Z","shell.execute_reply.started":"2025-03-19T15:45:00.028885Z","shell.execute_reply":"2025-03-19T15:45:00.035131Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working/talent_clef\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"!git config --global user.email \"hoivd79@gmail.com\"\n!git config --global user.name \"Dang Vinh Hoi\"\n!git status\n!git add .\n!git commit -m \"updated\"\n!git push","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:45:00.037620Z","iopub.execute_input":"2025-03-19T15:45:00.037917Z","iopub.status.idle":"2025-03-19T15:45:02.090604Z","shell.execute_reply.started":"2025-03-19T15:45:00.037885Z","shell.execute_reply":"2025-03-19T15:45:02.089775Z"}},"outputs":[{"name":"stdout","text":"On branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\t\u001b[31mmodified:   results/model_info.csv\u001b[m\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t\u001b[31mpredict/\u001b[m\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n[main f01faae] updated\n 2 files changed, 107 insertions(+), 1 deletion(-)\n create mode 100644 predict/agne/jobBERT-de/predict_19-03-2025_15.44.57.txt\nEnumerating objects: 11, done.\nCounting objects: 100% (11/11), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (8/8), 2.91 KiB | 2.91 MiB/s, done.\nTotal 8 (delta 1), reused 1 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\u001b[K\nTo https://github.com/hoivd/talent_clef\n   da38f01..f01faae  main -> main\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"cd ..","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T15:45:02.091823Z","iopub.execute_input":"2025-03-19T15:45:02.092189Z","iopub.status.idle":"2025-03-19T15:45:02.097492Z","shell.execute_reply.started":"2025-03-19T15:45:02.092160Z","shell.execute_reply":"2025-03-19T15:45:02.096783Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working\n","output_type":"stream"}],"execution_count":15}]}